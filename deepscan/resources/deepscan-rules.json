{"rules":[{"key":"ACCESS_THIS_BEFORE_SUPER_CALL","name":"`this` should be accessed after calling `super` in constructor of inherited class","description":"This rule applies when `this` is accessed before calling `super` in constructor of inherited class.\n\nWhen instantiating an inherited class, `this` is bound in `super` call. Therefore, accessing `this` before calling `super` throws `ReferenceError` exception.\n\nFor more information, please see [super](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super).","severity":["High"],"type":"Error","tag":["es6"],"examples":"class A {\n    constructor() {}\n}\nclass B extends A {\n    constructor() {\n        this.a = 1;\n        super(); // ACCESS_THIS_BEFORE_SUPER_CALL alarm\n    }\n}\n\nnew B();","examplesRevised":"class A {\n    constructor() {}\n}\nclass B extends A {\n    constructor() {\n        super();\n        this.a = 1;\n    }\n}\n\nnew B();","cwe":[],"see":["[super](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super)"]},{"key":"ARRAY_CALLBACK_RETURN_MISSING","name":"Callback function argument of `Array` functions should have `return` statement","description":"This rule applies when a callback function argument of the following `Array` functions does not have `return` statement.\n\n1. `Array.from`\n2. `Array.prototype.every`\n3. `Array.prototype.filter`\n4. `Array.prototype.find`\n5. `Array.prototype.findIndex`\n6. `Array.prototype.map`\n7. `Array.prototype.reduce`\n8. `Array.prototype.reduceRight`\n9. `Array.prototype.some`\n10. `Array.prototype.sort`\n\nReturn value of the above functions with missing `return` statement is always the same (an array filled with undefined in the case of `Array.from` or `Array.prototype.map`), and it is not likely to be a programmer's intent.\n\nWhen the return value is not needed, it is recommended to use `Array.prototype.forEach` function which does not make a new array as a return value.","severity":["Medium"],"type":"Code Quality","tag":[],"examples":"var memo = {}, arr = [\"apple\", \"lemon\", \"orange\"];\nvar ret1 = arr.map(function (curval, index) { // ARRAY_CALLBACK_RETURN_MISSING alarm because no value is returned in the callback function.\n    memo[curval] = index;\n});\nconsole.log(ret1); // 'ret1' is filled with undefined.\n\nvar ret2 = Array.from([1, 2, 3], function (x) { // ARRAY_CALLBACK_RETURN_MISSING alarm because no value is returned in the callback function.\n    x = x + 3;\n});\nconsole.log(ret2); // 'ret2' is filled with undefined.","examplesRevised":"var memo = {}, arr = [\"apple\", \"lemon\", \"orange\"];\nvar ret1 = arr.map(function (curval, index) {\n    memo[curval] = index;\n    return memo[curval];\n});\n\nvar ret2 = Array.from([1, 2, 3], function (x) {\n    x = x + 3;\n    return x;\n});","cwe":[],"see":[]},{"key":"ARRAY_INDEX_NEGATIVE","name":"Negative index should not be used on arrays","description":"This rule applies when a variable with negative value is used as an array index by wrong condition check.\n\nWhen a variable is checked as negative, using it as an array index is not likely to be a programmer's intent.","severity":["Medium"],"type":"Error","tag":[],"examples":"var arr = [1, 2, 3];\nif (x < 0) {\n    arr[x] = 3; // ARRAY_INDEX_NEGATIVE alarm: x is negative but is used as array index.\n}\nif (x <= 0) {\n    if (x) arr[x] = 3; // ARRAY_INDEX_NEGATIVE alarm: x is negative but is used as array index.\n}","examplesRevised":"var arr = [1, 2, 3];\nif (x >= 0) {\n    arr[x] = 3;\n}","cwe":[],"see":[]},{"key":"ASSIGN_BEFORE_DECL","name":"Variables should be declared before they are assigned","description":"This rule applies when local variables are assigned before they are declared.\n\nIn JavaScript, variables are hoisted and it is possible to use a variable before its declaration. But it is not recommended because it causes confusion as to where the variable is actually declared.\n\nTherefore to avoid confusion, variables should be declared in the beginning of the function body before they are used.\n\n**Note:** Not applied for the variables in inner functions because it is likely to be a programmer's intent.","severity":["Low"],"type":"Code Quality","tag":[],"examples":"function foo() {\n    bar = 4; // ASSIGN_BEFORE_DECL alarm\n    var bar;\n    console.log(bar);\n}\nfoo();","examplesRevised":"function foo() {\n    var bar = 4;\n    console.log(bar);\n}\nfoo();","cwe":[],"see":[]},{"key":"ASSIGN_SAME_VALUE","name":"The same value is assigned to the variable again","description":"This rule applies when a variable is assigned with the same value as the following:\n\n1. Assignment made to same variable\n2. Redundant assignment\n3. Swapping the assignment with LHS and RHS variables\n\nThe above assignments can be unnecessary code, but they can be assigned with a wrong variable which is not likely to be a programmer's intent.","severity":["Low"],"type":"Code Quality","tag":[],"examples":"// Example 1\na = a; // ASSIGN_SAME_VALUE alarm\n\n// Example 2\na = b;\na = b; // ASSIGN_SAME_VALUE alarm\n\n// Example 3\nr = a;\na = b;\nb = a; // ASSIGN_SAME_VALUE alarm","examplesRevised":"// Example 3\nr = a;\na = b;\nb = r; // a and b are swapped","cwe":[],"see":[]},{"key":"ASSIGN_TO_PROPERTY_OF_PRIMITIVE","name":"Assignment should not be made to property of primitive value","description":"This rule applies when assignment is made to property of primitive value.\n\nIn such a case, an exception is thrown in strict mode. In non-strict mode, assignment is ignored unlike the intention of a programmer.","severity":["Medium","High"],"type":"Error","tag":[],"examples":"function h() {\n    'use strict';\n    var a = 'str1';\n    a.prop = 42; // ASSIGN_TO_PROPERTY_OF_PRIMITIVE alarm because 'a' is a primitive string value.\n}","examplesRevised":"function h() {\n    'use strict';\n    var a = new String('str1');\n    a.prop = 42;\n}","cwe":[],"see":[]},{"key":"ASYNC_RENDER_RETURN_VALUE","name":"Using the return value of `ReactDOM.render()` should be avoided","description":"This rule applies when the return value of `ReactDOM.render()` is used.\n\n`ReactDOM.render()` currently returns a reference to the root React component instance. However, using this return value is legacy and should be avoided because future versions of React may render components asynchronously in some cases.\n\nFor more information, please see [ReactDOM.render()](https://facebook.github.io/react/docs/react-dom.html#render).","severity":["Low"],"type":"Code Quality","tag":["react"],"examples":"const instance = ReactDOM.render(<App />, rootElement);\nfoo(instance); // ASYNC_RENDER_RETURN_VALUE alarm","examplesRevised":"function cb(instance) {\n}\n// Attach a callback ref to get a return value\nReactDOM.render(<App ref={cb} />, rootElement);","cwe":[],"see":["[ReactDOM.render()](https://facebook.github.io/react/docs/react-dom.html#render)"]},{"key":"BAD_ASSIGN_TO_CONST","name":"Reassignment should not be made to a variable that is declared using `const` keyword","description":"This rule applies when reassignment is made to a variable declared using `const` keyword.\n\nThe value of the `const` variable is constant in block-scope. So `TypeError` exception occurs when the `const` variable is reassigned in block-scope.","severity":["High"],"type":"Error","tag":["es6"],"examples":"const A = 1;\nA = 2; // BAD_ASSIGN_TO_CONST alarm because A is reserved for constant above.\nconst MY_OBJECT = {'key': 'value'};\nMY_OBJECT = {'oKey': 'otherValue'}; // BAD_ASSIGN_TO_CONST alarm\nconst MY_ARRAY = [];\nMY_ARRAY = [\"A\"]; // BAD_ASSIGN_TO_CONST alarm","examplesRevised":"const MY_OBJECT = {'key': 'value'};\nMY_OBJECT.key = \"otherValue\";\nconst MY_ARRAY = [];\nMY_ARRAY.push(\"B\");","cwe":[],"see":["[const](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const)"]},{"key":"BAD_BITWISE_OPERATOR","name":"Bitwise operators should not be used where logical operators are expected","description":"This rule applies when bitwise operators are used where logical operators are expected.\n\nBitwise operators have different results from logical operators and `TypeError` exception may be thrown because short-circuit evaluation is not applied. (In short-circuit evaluation, right operand evaluation is skipped according to left operand value, e.g. `x` is `false` in `x && y`.)\n\nIt is obvious that logical operators are expected in the following code patterns:\n\n1. `e && e.x`\n2. `e || {}`","severity":["High"],"type":"Error","tag":["cwe"],"examples":"// Example 1\nvar obj = null;\nif (obj & obj.prop) { // BAD_BITWISE_OPERATOR alarm\n    console.log(obj.prop);\n}\n\n// Example 2\noptions = options | {}; // BAD_BITWISE_OPERATOR alarm","examplesRevised":"// Example 1\nvar obj = null;\nif (obj && obj.prop) {\n    console.log(obj.prop);\n}\n\n// Example 2\noptions = options || {};","cwe":["480"],"see":[]},{"key":"BAD_ASSIGN_IN_CONDITION","name":"An equality operator should be used instead of an assignment operator in a conditional statement","description":"This rule applies when an assignment operator is unintentionally used in a conditional statement instead of an equality operator.\n\n**Note:** There are cases where an assignment operator is intentionally used in a conditional statement to simplify an assignment and a truthy value check. In order not to detect these intentional cases as alarms, this rule only applies when the RHS of the assignment is evaluated to a constant value.","severity":["Medium"],"type":"Error","tag":["cwe"],"examples":"x = str.indexOf(y);\nif (x = -1) return \"no\"; // BAD_ASSIGN_IN_CONDITION alarm. The true branch is always taken and \"no\" is returned.\nelse return \"yes\";","examplesRevised":"x = str.indexOf(y);\nif (x == -1) return \"no\";\nelse return \"yes\";","cwe":["480","481"],"see":[]},{"key":"BAD_DANGER_WITH_CHILDREN","name":"When using `dangerouslySetInnerHTML` prop for a React DOM element, children should not be specified","description":"This rule applies when children are specified also when using `dangerouslySetInnerHTML` prop for a React DOM element.\n\n`dangerouslySetInnerHTML` prop is provided as React's replacement for using `innerHTML` property of DOM element. It replaces children of a React DOM element with the value of its `__html` property.\n\nSo, React will throw an exception if you specify children of the React DOM element which already has `dangerouslySetInnerHTML` prop. You should use either the prop or React element when defining the children.","severity":["High"],"type":"Error","tag":["react"],"examples":"import ReactDOM from 'react-dom';\n\nReactDOM.render(\n    <div dangerouslySetInnerHTML={{ __html: \"myHTML\" }}>\n        <Children /> {/* BAD_DANGER_WITH_CHILDREN alarm */}\n    </div>, document.getElementById(\"root\")\n);","examplesRevised":"import ReactDOM from 'react-dom';\n\nReactDOM.render(\n    <div dangerouslySetInnerHTML={{ __html: \"myHTML\" }} />,\n    document.getElementById(\"root\")\n);","cwe":[],"see":["[dangerouslySetInnerHTML](https://facebook.github.io/react/docs/dom-elements.html#dangerouslysetinnerhtml)"]},{"key":"BAD_EVENT_HANDLER","name":"Event handler of a React element should not be a string","description":"This rule applies when the event handler of a React element is specified with a string.\n\nUnlike HTML, an event handler should be always a function in React. If you specify handler code as a string, React will throw an exception.","severity":["High"],"type":"Error","tag":["react"],"examples":"import React from 'react';\n\nclass Hello extends React.Component {\n    render() {\n        return (\n            <div onClick=\"console.log('clicked')\"> {/* BAD_EVENT_HANDLER alarm */}\n                Hello\n            </div>\n        );\n    }\n}","examplesRevised":"import React from 'react';\n\nclass Hello extends React.Component {\n    handleClick() {\n        console.log('clicked');\n    }\n\n    render() {\n        return (\n            <div onClick={this.handleClick}>\n                Hello\n            </div>\n        );\n    }\n}","cwe":[],"see":["[Handling Events](https://facebook.github.io/react/docs/handling-events.html)"]},{"key":"BAD_EVENT_HANDLER_RETURN_FALSE","name":"`return false` should not be used in a React event handler","description":"This rule applies when the return value of a React event handler is `false`.\n\nUnlike HTML, returning `false` from an event handler does not prevent event propagation or default behavior in React. Instead, `stopPropagation()` or 'preventDefault()` should be explicitly called on the React event object received as a parameter.","severity":["Medium"],"type":"Error","tag":["react"],"examples":"import React from 'react';\n\nclass Hello extends React.Component {\n    render() {\n        return (\n            <a href=\"http://foo.com\" onClick={event => false}> {/* BAD_EVENT_HANDLER_RETURN_FALSE alarm */}\n                foo.com\n            </a>\n        );\n    }\n}","examplesRevised":"import React from 'react';\n\nclass Hello extends React.Component {\n    render() {\n        return (\n            <a href=\"http://foo.com\" onClick={event => event.preventDefault()}>\n                foo.com\n            </a>\n        );\n    }\n}","cwe":[],"see":["[SyntheticEvent](https://facebook.github.io/react/docs/events.html)"]},{"key":"BAD_LENGTH_CHECK","name":"`length` property itself should not be checked in the code for React child element","description":"This rule applies when `length` property itself is checked in the code for React child element.\n\nIn React, a child element specified as `undefined`, `null`, `true` or `false` is excluded from rendering. This feature is often used to render an element conditionally, e.g. `cond && <div>...</div>`.\n\nHowever, the exclusion is not applied to numeric value 0. For example, 0 will be rendered for `array.length && <div>...</div>` if `array` is empty.\n\nThis problem is fixed by using a boolean-valued expression such as `array.length > 0` instead of checking `length` property itself.","severity":["Medium"],"type":"Error","tag":["react"],"examples":"import React from 'react';\n\nclass Foo extends React.Component {\n    render() {\n        return (\n            <div>\n                {this.props.items.length && `(${this.props.items.join(', ')})`} {/* BAD_LENGTH_CHECK alarm */}\n            </div>\n        );\n    }\n}","examplesRevised":"import React from 'react';\n\nclass Foo extends React.Component {\n    render() {\n        return (\n            <div>\n                {this.props.items.length > 0 && `(${this.props.items.join(', ')})`}\n            </div>\n        );\n    }\n}","cwe":[],"see":["[Booleans, Null, and Undefined Are Ignored](https://facebook.github.io/react/docs/jsx-in-depth.html#booleans-null-and-undefined-are-ignored)"]},{"key":"BAD_JSX_COMMENT","name":"The content of a JSX text node should not be in the form of JavaScript comment.","description":"This rule detects JSX text node whose content is in the form of JavaScript comment.\n\nIf you intended a JavaScript comment in JSX, you need to enclose the comment with braces to prevent it from showing in browsers.\n\nIf you really intended a text, it is better to enclose the text with quotes and braces to make it explicit that it is not a comment.","severity":["Medium"],"type":"Error","tag":["react"],"examples":"import React from 'react';\n\nclass Hello extends React.Component {\n    render() {\n        return (\n            <div>\n                /* This is a comment */ {/* BAD_JSX_COMMENT alarm because this text is recognized as a JSX child instead of a comment. */}\n                <div>// is a double slash.</div> {/* BAD_JSX_COMMENT alarm because this text in div element is recognized as a JSX child instead of a comment. */}\n            </div>\n        );\n    }\n}","examplesRevised":"import React from 'react';\n\nclass Hello extends React.Component {\n    render() {\n        return (\n            <div>\n                {/* This is a comment */}\n                <div>{\"// is a double slash.\"}</div>\n            </div>\n        );\n    }\n}","cwe":[],"see":[]},{"key":"BAD_MIN_MAX_FUNC","name":"`Math.min` and `Math.max` functions should be combined in correct order","description":"This rule applies when `Math.min` and `Math.max` functions are incorrectly combined.\n\n`x = Math.min(100, x);` specifies upper limit of `x` as 100 and `x = Math.max(0, x);` specifies the lower limit as 0. When these limit values are combined in incorrect order, the same result is always produced in unexpected way.","severity":["Medium"],"type":"Error","tag":[],"examples":"x = Math.min(0, Math.max(100, x)); // BAD_MIN_MAX_FUNC alarm. The result is always 0.","examplesRevised":"x = Math.max(0, Math.min(100, x));","cwe":[],"see":["[Math.min()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min)","[Math.max()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max)"]},{"key":"BAD_NEGATION_OPERATOR","name":"The logical negation operator (`!`) should be used in correct order","description":"This rule applies when the logical negation operator (`!`) is evaluated in incorrect order because of operator precedence.\n\nFor example, if code to test whether `x` is not array is written like `!x instanceof Array`, it is evaluated as `(!x) instanceof Array`, resulting in `false` regardless of `x`. In this case, explicit parentheses should be used as in `!(x instanceof Array)` because `!` has higher precedence than binary operators.\n\nThe following binary operators are considered: `in`, `instanceof`, `<`, `>`, `<=`, `>=`, `==`, `!=`, `===`, `!==`","severity":["Medium"],"type":"Error","tag":["cwe"],"examples":"// Example 1\nif (!x instanceof Array) { // BAD_NEGATION_OPERATOR alarm. The result is always false.\n    console.log('x is not array');\n}\n\n// Example 2\nif (!x.length === 0) { // BAD_NEGATION_OPERATOR alarm. The result is always false.\n    console.log('x is not empty');\n}","examplesRevised":"// Example 1\nif (!(x instanceof Array)) {\n    console.log('x is not array');\n}\n\n// Example 2\nif (!(x.length === 0)) {\n    console.log('x is not empty');\n}","cwe":["569","570"],"see":[]},{"key":"BAD_NUMBER_FUNC","name":"String functions should not be used on number values","description":"This rule applies when string functions are used on number values.\n\nWhen string functions are called on number values, `TypeError` exception occurs.","severity":["High"],"type":"Error","tag":[],"examples":"var x = 1234;\nvar y = (x / 100).indexOf('.'); // BAD_NUMBER_FUNC alarm","examplesRevised":"var x = 1234;\nvar y = String(x / 100).indexOf('.');","cwe":[],"see":["[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)"]},{"key":"BAD_NUMBER_PROPERTY","name":"Non-existent properties of number value should not be accessed","description":"This rule applies when non-existent properties of number value are accessed.\n\nAccessing non-existent properties of number value results in `undefined` value.","severity":["Medium"],"type":"Error","tag":[],"examples":"var x = 1234;\nvar y = x.length; // BAD_NUMBER_PROPERTY alarm","examplesRevised":"var x = 1234;\nvar y = x.toString().length;","cwe":[],"see":[]},{"key":"BAD_OPERAND_TYPE","name":"`in` and `instanceof` should have a right operand of proper type","description":"This rule applies when `in` and `instanceof` operators have a right operand of wrong type.\n\nIt can be applied to the following:\n\n 1. Right operand of `in` operator is not an object\n 2. Right operand of `instanceof` operator is not a constructor","severity":["High"],"type":"Error","tag":[],"examples":"// Example 1\n\"prop\" in 42; // BAD_OPERAND_TYPE alarm\n\n// Example 2\nfunction f() {\n}\nvar x = new f();\nvar b = x instanceof \"string\"; // BAD_OPERAND_TYPE alarm","examplesRevised":"function f() {\n}\nvar x = new f();\nvar b = x instanceof f;","cwe":[],"see":["[in operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in)","[instanceof operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof)"]},{"key":"BAD_REGEXP","name":"Empty character classes should not be used in regular expressions","description":"This rule applies when a regular expression has empty character classes.\n\nBecause empty character classes '[]' in regular expressions do not match anything, they are not likely to be a programmer's intent.","severity":["Medium"],"type":"Error","tag":[],"examples":"var foo = /^abc[]/;","examplesRevised":"var foo = /^abc/;\nvar bar = /^abc[a-z]/;","cwe":[],"see":["[Regular Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)"]},{"key":"BAD_RENDER_RETURN_VALUE","name":"Return value of React component's `render()` should be valid type","description":"This rule applies when return value of React component's `render()` is wrong.\n\nSince the `render()` should return a React element, `null`, or `false`, it might be a programmer's mistake returning a wrong value or forgetting `return` statement when a React element is defined using JSX.","severity":["Medium"],"type":"Error","tag":["react"],"examples":"// Example 1\nimport React from 'react';\n\nclass Hello extends React.Component {\n    render() {\n        <div>Hello</div>; // BAD_RENDER_RETURN_VALUE alarm because 'render()' does not return this React element.\n    }\n}\n\n// Example 2\nclass Hello2 extends React.Component {\n    render() {\n        if (!this.props.myProp) {\n            return true; // BAD_RENDER_RETURN_VALUE alarm because 'render()' should return only a React element, null, or false.\n        }\n        return <div>Hello {this.props.myProp}</div>;\n    }\n}","examplesRevised":"// Example 1\nimport React from 'react';\n\nclass Hello extends React.Component {\n    render() {\n        return (\n            <div>Hello</div>\n        );\n    }\n}\n\n// Example 2\nclass Hello2 extends React.Component {\n    render() {\n        if (!this.props.myProp) {\n            return false;\n        }\n        return <div>Hello {this.props.myProp}</div>;\n    }\n}","cwe":[],"see":["[render() method](https://facebook.github.io/react/docs/react-component.html#render)"]},{"key":"BAD_STYLE_PROP","name":"`style` property of a React DOM element should be an object","description":"This rule applies when the `style` property of a React DOM element is not specified with an object.\n\nUnlike HTML, a string representing CSS rule is not allowed as the value of a `style` property. If you specify a value other than object, `null`, or `undefined`, React will throw an exception.","severity":["High"],"type":"Error","tag":["react"],"examples":"import React from 'react';\n\nclass Hello extends React.Component {\n    getTextStyle() {\n        return { color: 'blue' };\n    }\n\n    render() {\n        return (\n            <div>\n                <div style=\"color: 'red'\">Text in red</div> {/* BAD_STYLE_PROP alarm because it is a string value. */}\n                <div style={this.getTextStyle}>Text in blue</div> {/* BAD_STYLE_PROP alarm because it is a function value. */}\n            </div>\n        );\n    }\n}","examplesRevised":"import React from 'react';\n\nclass Hello extends React.Component {\n    getTextStyle() {\n        return { color: 'blue' };\n    }\n\n    render() {\n        return (\n            <div>\n                <div style={{ color: 'red' }}>Text in red</div>\n                <div style={this.getTextStyle()}>Text in blue</div>\n            </div>\n        );\n    }\n}","cwe":[],"see":["[style](https://facebook.github.io/react/docs/dom-elements.html#style)"]},{"key":"BAD_TYPE_COERCION","name":"Suspicious type coercion should be avoided","description":"This rule applies when suspicious type coercion occurs.\n\nJavaScript utilizes implicit type conversion widely, so a programmer needs to check type conversion with caution.\n\nThe following is suspicious implicit type conversion for X:\n\n 1. X is converted to string\n  * X + string (X is undefined or symbol)\n\n 2. X is converted to number\n  * X + undefined/null/boolean/number/symbol (X is undefined, null, or symbol)\n  * X @ <All types> (X is undefined/null/non-numeric string/symbol. @ means -, *, /, %.)\n  * X @ Y (X is undefined/null/boolean/non-numeric string/symbol/object except for the case where X and Y are both strings. @ means <, <=, >, >=.)\n  * X & <All types> (X is undefined/null/boolean/non-numeric string/symbol/object)\n  * X | boolean (X is boolean)\n  * X | Y (X is symbol)\n  * X @ Y (X is boolean and Y is number/string/object. Or X is non-numeric string and Y is boolean/number. Or X is object and Y is boolean/number. @ means ==, !=.)\n\n 3. X is converted to boolean (X is a primitive wrapper object)\n  * if (X) ...\n  * X && ...\n  * X || ...\n  * X ? ... : ...\n  * !X\n\nFor your reference, JavaScript converts a type like the following:\n\n 1. undefined is converted to string: \"undefined\"\n 2. undefined is converted to number: NaN\n 3. null is converted to string: \"null\"\n 4. null is converted to number: 0\n 5. boolean is converted to number: false is 0, true is 1\n 6. Empty string is converted to number: 0\n 7. Neither empty nor numeric string is converted to number: NaN\n 8. symbol is converted to string or number: a TypeError exception is thrown\n 9. Primitive wrapper object is converted to boolean: true","severity":["Medium"],"type":"Error","tag":[],"examples":"// Example 1\nvar cssString = \"\";\nvar backPosition;\nif (animatedBackground.length === 3) {\n    cssString += \"backgroundPosition: \" + backPosition + \"px; \"; // BAD_TYPE_COERCION alarm: Expression 'backPosition' has an undefined value and type-coerced to string type.\n}\n\n// Example 2\nvar mod = $index & 1;\nif (mod !== old$index & 1) { // BAD_TYPE_COERCION alarm: Expression 'mod !== old$index' has boolean type and type-coerced to number type.\n    if (mod === selector) {\n        addClass(scope.$eval(attr[name]));\n    } else {\n        removeClass(scope.$eval(attr[name]));\n    }\n}","examplesRevised":"// Example 1\nvar cssString = \"\";\nvar backPosition;\nif (animatedBackground.length === 3) {\n    backPosition = 0; // Assign a valid value.\n    cssString += \"backgroundPosition: \" + backPosition + \"px; \";\n}\n\n// Example 2\nvar mod = $index & 1;\nif (mod !== (old$index & 1)) { // Use parentheses.\n    if (mod === selector) {\n        addClass(scope.$eval(attr[name]));\n    } else {\n        removeClass(scope.$eval(attr[name]));\n    }\n}","cwe":[],"see":[]},{"key":"BAD_TYPEOF_COMPARISON","name":"Result of `typeof` should be compared with correct value","description":"This rule applies when the result of `typeof` is compared with incorrect value.\n\nPossible return values of `typeof` operator are the following strings:\n\n * \"undefined\"\n * \"object\"\n * \"boolean\"\n * \"number\"\n * \"string\"\n * \"symbol\"\n * \"function\"\n\nTherefore, if a programmer compares with the value not listed above, it will always result in `false` undesirably.\n\nFor more information, please see [this documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof).","severity":["Medium"],"type":"Error","tag":[],"examples":"// Example 1\n// BAD_TYPEOF_COMPARISON alarm because 'array' is not the possible return value of typeof.\nif (typeof x === 'array') { console.log('x is array'); }\n\n// Example 2\n// BAD_TYPEOF_COMPARISON alarm because 'udefined' is mistyping of 'undefined'.\nvar zkPort = typeof portValue === 'udefined' ? '2181' : portValue;\n\n// Example 3\n// BAD_TYPEOF_COMPARISON alarm because typeof result is not compared with a string value.\nif (typeof x === undefined) { console.log('x is undefined'); }\n\n// Example 4\n// BAD_TYPEOF_COMPARISON alarm because typeof result is not compared with a string value.\nif (typeof x) { console.log('x is not undefined'); }","examplesRevised":"// Example 1\n// Use Array.isArray().\nif (Array.isArray(x)) { console.log('x is array'); }\n\n// Use a function in third-party libraries like jQuery or underscore.\nif ($.isArray(x)) { console.log('x is array'); }\n\n// Example 2\nvar zkPort = typeof portValue === 'undefined' ? '2181' : portValue;\n\n// Example 3\nif (typeof x === 'undefined') { console.log('x is undefined'); }\n\n// Example 4\nif (typeof x !== 'undefined') { console.log('x is not undefined'); }","cwe":[],"see":["[typeof operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof)"]},{"key":"BAD_UNKNOWN_PROP","name":"React property name in React DOM element should be pre-defined one","description":"This rule applies when a wrong React property name is used for React DOM element.\n\nIn React, DOM attributes and properties are supported as camelCased names, and `data-*` and `aria-*` attributes should be lowercased. Therefore, it is possible to confuse DOM attribute name with React property name, and React will output a warning message.\n\nIt can be applied to the following:\n\n 1. DOM attribute name is used instead of React DOM property (e.g. `class` instead of `className`)\n 2. DOM event handler property is used instead of React event handler (e.g. `onclick` instead of `onClick`)\n 3. `data-*` and `aria-*` attributes are not used as lowercased names (e.g. `data-X` instead of `data-x`)","severity":["Medium"],"type":"Error","tag":["react"],"examples":"// Example 1\nReact.createClass({\n    render() {\n        return <div class=\"hello\">Hello</div>; // BAD_UNKNOWN_PROP alarm\n    }\n});\n\n// Example 2\nfunction handleClick() {}\n\nReact.createClass({\n    render() {\n        return <div onclick={handleClick}>Hello</div>; // BAD_UNKNOWN_PROP alarm\n    }\n});\n\n// Example 3\nReact.createClass({\n    render() {\n        return <div data-X=\"3\">Hello</div>; // BAD_UNKNOWN_PROP alarm\n    }\n});","examplesRevised":"// Example 1\nReact.createClass({\n    render() {\n        return <div className=\"hello\">Hello</div>;\n    }\n});\n\n// Example 2\nfunction handleClick() {}\n\nReact.createClass({\n    render() {\n        return <div onClick={handleClick}>Hello</div>;\n    }\n});\n\n// Example 3\nReact.createClass({\n    render() {\n        return <div data-x=\"3\">Hello</div>;\n    }\n});","cwe":[],"see":["[React DOM elements](https://facebook.github.io/react/docs/dom-elements.html)"]},{"key":"BAD_UPDATE_STATE","name":"Updating the state inside the specific lifecycle methods of a React component should be avoided","description":"This rule applies when the state is updated inside the specific lifecycle methods of a React component.\n\nIt is not allowed to use `setState()` or assign to `this.state` inside the following methods:\n\n 1. `getDefaultProps()`\n 2. `getInitialState()`\n 3. `render()`\n 4. `componentWillUnmount()`\n\nIf the state is updated inside the above methods, React does not apply the updated state or it may cause an unintentional behaviour even though the update is applied. For example, calling `setState()` inside `render()` can cause the infinite loop with `render()`.","severity":["Medium"],"type":"Error","tag":["react"],"examples":"import React from 'react';\n\nclass SayHello extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { name: \"DeepScan\" };\n    }\n    render() {\n        this.setState({ name: this.state.name + \" Hello\"}); // BAD_UPDATE_STATE alarm because `render()` should be a pure function of props and state.\n        return <div>{this.state.name}</div>;\n    }\n}","examplesRevised":"import React from 'react';\n\nclass SayHello extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { name: \"DeepScan\" };\n    }\n    componentWillMount() {\n        this.setState({ name: this.state.name + \" Hello\"});\n    }\n    render() {\n        return <div>{this.state.name}</div>;\n    }\n}","cwe":[],"see":[]},{"key":"BAD_USE_STRICT","name":"Strict mode should be declared properly","description":"This rule applies when strict mode is not properly declared.\n\nIf not properly declared, strict mode is not applied, so debugging and runtime behaviors might be unexpected.\n\nIt can be applied to the following:\n\n 1. 'use strict' directive is not at the beginning of function body or global code\n 2. Typing mistakes like 'use_strict'","severity":["Medium"],"type":"Error","tag":[],"examples":"// Example 1\nfunction f() {\n    var x;\n    'use strict'; // BAD_USE_STRICT alarm\n}\n\n// Example 2\nfunction g() {\n    'use_strict'; // BAD_USE_STRICT alarm\n}","examplesRevised":"// Example 1\nfunction f() {\n    'use strict';\n    var x;\n}\n\n// Example 2\nfunction g() {\n    'use strict';\n}","cwe":[],"see":["[Strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)"]},{"key":"BAD_WITH_STATEMENT","name":"`with` statement should not be used","description":"This rule applies when `with` statement is used.\n\n`with` statement is not recommended by the following problems:\n 1. `with` statement makes it hard to know that the variable is defined in which the specified object scope or parent scope chain.\n 2. Since `with` statement forces the specified object scope to be searched first, accessing scope of parent object can be slower.\n\n**Note:** In strict mode, using `with` statement throws `SyntaxError`.","severity":["Low"],"type":"Code Quality","tag":[],"examples":"function foo(v, obj) {\n    with (obj) { // BAD_WITH_STATEMENT alarm\n        v = \"ambiguous\"; // It is hard to know whether 'v' is a property of 'obj' or the first argument of function 'foo'.\n    }\n}","examplesRevised":"function foo(v, obj) {\n    obj.v = \"not ambiguous\";\n    v = \"not ambiguous\";\n}","cwe":[],"see":[]},{"key":"CALL_NON_CONSTRUCTOR","name":"Non-constructor function should not be called with `new` operator as a constructor","description":"This rule applies when a non-constructor function is called with `new` operator. In such a case, an exception is thrown.\n\nIt can be applied to the following:\n\n 1. Generator function is called with `new` operator\n 2. Arrow function is called with `new` operator\n 3. `Symbol` function is called with `new` operator","severity":["High"],"type":"Error","tag":["es6"],"examples":"function * foo() {}\nnew foo(); // CALL_NON_CONSTRUCTOR alarm\n\nvar bar = () => {};\nnew bar(); // CALL_NON_CONSTRUCTOR alarm\n\nvar a = new Symbol(); // CALL_NON_CONSTRUCTOR alarm","examplesRevised":"function * foo() {}\nvar a = foo();\n\nfunction bar() {}\nnew bar();\n\nvar b = Symbol();","cwe":[],"see":[]},{"key":"CALL_NON_FUNC","name":"Non-function object should not be called as a function","description":"This rule applies when a non-function object is called like a function. In such a case, an exception is thrown.\n\nIt can be applied to the following:\n\n 1. Non-function object, e.g. plain object or primitive value, is called like a function\n 2. Non-constructor object is called with `new` operator","severity":["High"],"type":"Error","tag":[],"examples":"var f = {};\nf(); // CALL_NON_FUNC alarm","cwe":[],"see":[]},{"key":"COMPARE_INCOMPATIBLE_TYPE_STRICTLY","name":"Strict equality should not be used for two values with different types","description":"This rule applies when two values with different types are compared with strict equality.\n\nStrict equality is always `false` for different types, so this comparison is not likely to be a programmer's intent.\n\nCurrently, this rule is applied for the return value of built-in API.","severity":["Medium"],"type":"Error","tag":[],"examples":"var x = 10 / 3;\nx.toFixed(1) === 3.3; // COMPARE_INCOMPATIBLE_TYPE_STRICTLY alarm because 'toFixed' function returns string type.","examplesRevised":"var x = 10 / 3;\nx.toFixed(1) === \"3.3\";","cwe":[],"see":[]},{"key":"COMPARE_NAN","name":"Comparing `NaN` directly should be avoided","description":"This rule applies when `NaN` is directly compared.\n\nIn the JavaScript, direct comparison with `NaN` like `x == NaN` is always `false`.\n\nTherefore, use `isNaN` function to determine whether a value is `NaN`.","severity":["Medium"],"type":"Error","tag":[],"examples":"var x = undefined + 0;\nif (x == NaN) {\n    x = 0; // COMPARE_NAN alarm\n}","examplesRevised":"var x = undefined + 0;\nif (isNaN(x)) {\n    x = 0;\n}","cwe":[],"see":["[isNaN()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN)"]},{"key":"CONSTANT_CONDITION","name":"Constant expression should not be used in the conditional statements","description":"This rule applies when a condition check has always the same result.\n\nFor example, it occurs when constant-valued variables are used or the condition is redundant with previously checked one. This rule also applies when only one `case` is executed due to the result of `switch` condition check being always the same.\n\nIt could be a debugging code, but at worst it is a programmer's mistake that completely misses block of code intended to be executed.\n\n**Note:** Not applied if the variable name is `debug` or `dbg`.","severity":["Low","Medium"],"type":"Code Quality","tag":["cwe"],"examples":"// Example 1\nif (y) {\n    x = 42;\n} else {\n    x = 42;\n}\nif (x > 0) { // CONSTANT_CONDITION alarm: Condition 'x > 0' is always satisfied at this point.\n    console.log(x);\n}\n\n// Example 2\nif (y) {\n    x = 42;\n} else {\n    x = 42;\n}\nswitch (x) {\n    case 0: z = 0; break;\n    case 42: z = 1; break; // CONSTANT_CONDITION alarm: This switch case is always matched.\n}\n\n// Example 3\nif (x) {\n    if (x != null) { // CONSTANT_CONDITION alarm: Condition 'x != null' is always satisfied because it is redundant with the above condition 'x'.\n        console.log(x.p);\n    }\n}\n\n// Example 4\nif (x < 0) {\n    if (x < 42) {\n        console.log('x is between 0 and 42'); // CONSTANT_CONDITION alarm: Condition 'x < 42' is always satisfied at this point because it is redundant because it is redundant with the above condition 'x < 0'.\n    }\n}\n\n// Example 5\nfunction foo(x, y) {\n    var arr = [];\n    if (x) arr.push(x);\n    if (y) arr.push(y);\n    if (arr) { // CONSTANT_CONDITION alarm: Condition 'arr' is always satisfied at this point because it is an array. Did you mean 'arr.length' instead?\n        console.log(arr.join(\", \"));\n    }\n}","examplesRevised":"// Example 1\nif (y) {\n    x = 42;\n} else {\n    x = 0;\n}\nif (x > 0) {\n    console.log(x);\n}\n\n// Example 2\nif (y) {\n    x = 42;\n} else {\n    x = 0;\n}\nswitch (x) {\n    case 0: z = 0; break;\n    case 42: z = 1; break;\n}\n\n// Example 3\nif (x) {\n    console.log(y.p);\n}\n\n// Example 4\nif (x > 0) {\n    if (x < 42) {\n        console.log('x is between 0 and 42');\n    }\n}\n\n// Example 5\nfunction foo(x, y) {\n    var arr = [];\n    if (x) arr.push(x);\n    if (y) arr.push(y);\n    if (arr.length) {\n        console.log(arr.join(\", \"));\n    }\n}","cwe":["489","569","570","571"],"see":[]},{"key":"DIRECT_ASSIGN_TO_STATE","name":"Assignment should not be made to `this.state` in the React component's specific methods","description":"This rule applies when assignment is made to `this.state` in the React component's specific methods.\n\nWhen updating `this.state` inside the following methods, you should use `setState()`:\n\n 1. DOM event handler\n 2. `componentDidMount()`\n 3. `componentDidUpdate()`\n 4. `shouldComponentUpdate()`\n 5. `componentWillMount()`\n 6. `componentWillReceiveProps()`\n\nIf `this.state` is modified directly inside the above methods, it may cause a problem because the component is not re-rendered or the updated state is no applied.","severity":["Medium"],"type":"Error","tag":["react"],"examples":"import React from 'react';\n\nclass SayHello extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChanged = this.handleChanged.bind(this);\n    }\n    handleChanged() {\n        this.state = { message: \"Hello\" }; // DIRECT_ASSIGN_TO_STATE alarm\n        alert(this.state.message);\n    }\n    render() {\n        return (\n            <button onClick={this.handleChanged}> Click! </button>\n        );\n    }\n}","examplesRevised":"import React from 'react';\n\nclass SayHello extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChanged = this.handleChanged.bind(this);\n    }\n    handleChanged() {\n        this.setState({ message: \"Hello\" });\n        alert(this.state.message);\n    }\n    render() {\n        return (\n            <button onClick={this.handleChanged}> Click! </button>\n        );\n    }\n}","cwe":[],"see":[]},{"key":"DUPLICATE_CASE","name":"`switch` statement should not have duplicate `case` clauses","description":"This rule applies when `switch` statement has duplicate `case` clauses.\n\nLater clause is ignored and it is likely that a programmer copied a clause but forgot to change.","severity":["Medium"],"type":"Error","tag":[],"examples":"switch (x) {\ncase '1':\n    e += 'case';\n    break;\ncase '1': // DUPLICATE_CASE alarm\n    e += 'another case';\n    break;\n}","examplesRevised":"switch (x) {\ncase '1':\n    e += 'case';\n    break;\ncase '2':\n    e += 'another case';\n    break;\n}","cwe":[],"see":[]},{"key":"DUPLICATE_DECL","name":"Functions or variables should not be redeclared","description":"This rule applies when a function or a variable is redeclared in local context.\n\nIn JavaScript, it is possible to redefine the function and only the last one is used. This causes confusion as to where the function is actually defined.\n\nSince functions and variables are hoisted in JavaScript, redeclared variables combined with hoisting and function-scoped `var` cause confusion as to where the variable is defined.\n\n```\nfunction foo() {\n    var code = 1;\n    if (true) {\n        var code = 2;\n    }\n    console.log(code); // code has a value of 2 because 'var' is not block-scoped\n}\n```\n\n**Note:** This rule applies only for the variable whose name is length of 3 characters or above. It is because short variable name, e.g. `i`, is frequently used as loop counters.","severity":["Low","Medium"],"type":"Code Quality","tag":[],"examples":"function a() { return 1; }\nfunction a(b) { return b; } // DUPLICATE_DECL alarm\n\nvar foo;\nvar foo; // DUPLICATE_DECL alarm","examplesRevised":"// Choose the function which you intend to apply. And delete others.\nfunction a(b) { return b; }\n\n// Delete duplicated one\nvar foo;","cwe":[],"see":[]},{"key":"DUPLICATE_PROPERTY","name":"Property should not be redeclared in object literals or classes","description":"This rule applies when an object literal or a class has multiple properties with the same name.\n\nBecause only the last property is used, a programmer needs to check whether expected value is set.","severity":["Medium"],"type":"Error","tag":[],"examples":"// Example 1\nvar obj = {\n    a: 42,\n    get a() { // DUPLICATE_PROPERTY alarm\n        return 43;\n    }\n};\n\n// Example 2\nvar grid = {\n    rowNum: $('#pageSize').val(),\n    rowNum: 15 // DUPLICATE_PROPERTY alarm\n}\n\n// Example 3\nvar x = \"getValue\";\nclass A {\n    getValue() {}\n    [x]() {}  // DUPLICATE_PROPERTY alarm\n}","examplesRevised":"// Choose the property which you intend to apply. And delete others.\n\nvar obj = {\n    a: 43\n};\n\nvar grid = {\n    rowNum: $('#pageSize').val()\n}","cwe":[],"see":[]},{"key":"EMPTY_BLOCK","name":"Empty block statements should not be used in conditional statements","description":"This rule applies when block statement of conditional statements is empty.\n\nFor code readability and maintainability, empty block statement in `if`, `else`, and `else if` is not recommended.","severity":["Low"],"type":"Code Quality","tag":[],"examples":"if (foo) { // EMPTY_BLOCK alarm because empty block is used as if branch.\n}","examplesRevised":"if (foo) {\n    // TODO\n}","cwe":[],"see":[]},{"key":"EVENT_HANDLER_INVALID_THIS","name":"React event handler should have proper `this` object binding","description":"This rule applies when a function without `this` object binding is used as a React event handler.\n\nWhen calling an event handler, React does not provide `this` object. So, if you try accessing a property of `this` inside the handler, a `TypeError` exception is thrown.\n\nTo fix this problem, you can use `Function.prototype.bind()` to specify `this` object or use ES6 arrow function.\n\n**Note:** `React.createClass()` automatically binds member functions with `this` object. So, extra care should be taken when converting it to ES6 class.","severity":["High"],"type":"Error","tag":["react"],"examples":"import React from 'react';\n\nclass Hello extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { name: \"John\" };\n    }\n\n    handleClick() {\n        this.setState({ name: \"Mary\" }); // 'this' has undefined value.\n    }\n\n    render() {\n        return (\n            <div onClick={this.handleClick}> {/* EVENT_HANDLER_INVALID_THIS alarm because 'this.handleClick' function is not bound with 'this'. */}\n                {this.state.name}\n            </div>\n        );\n    }\n}","examplesRevised":"import React from 'react';\n\nclass Hello extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { name: \"John\" };\n\n        // Bind event handler inside constructor\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        this.setState({ name: \"Mary\" });\n    }\n\n    render() {\n        return (\n            <div onClick={this.handleClick}>\n                {this.state.name}\n            </div>\n        );\n    }\n}","cwe":[],"see":["[Handling Events](https://facebook.github.io/react/docs/handling-events.html)"]},{"key":"FORIN_ARRAY","name":"`for-in` loop should not be used on arrays","description":"This rule applies when `for-in` loop is used on arrays.\n\n`for-in` loop is not recommended by the following:\n\n * `for-in` loop is slower than `for` loop\n * A variable in `for-in` loop means index of an array. But programmers tend to consider it as element of an array.","severity":["Low"],"type":"Code Quality","tag":[],"examples":"var array = ['foo', 'bar'];\n// FORIN_ARRAY alarm\nfor (var obj in array)\n    console.log('item: ' + obj); // Result: 'item: 0', 'item: 1' (not as expected 'item: foo', 'item: bar')","examplesRevised":"var array = ['foo', 'bar'];\nfor (var i = 0; i < array.length; i++)\n    console.log('item: ' + array[i]);","cwe":[],"see":["[for...in statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in)"]},{"key":"IDENTICAL_BRANCHES","name":"Branches in the conditional statements should not have the same implementation","description":"This rule applies when branches in the conditional statements or expressions have the same implementation.\n\nThis might imply the condition is unnecessary, but at worst this is a programmer's mistake. For example, a programmer copies code from a branch into another and he often forgets to modify it.\n\nTherefore, a programmer needs to check the same code is really needed for both.\n\n**Note:** Not applied for `case` clauses in `switch` statement because it is likely to be a programmer's intent.","severity":["Medium"],"type":"Code Quality","tag":["cwe"],"examples":"// Example 1\nif (x >= 0) { // IDENTICAL_BRANCHES alarm\n    y = x;\n} else {\n    y = x;\n}\n\n// Example 2\ny = x >= 0 ? x : x; // IDENTICAL_BRANCHES alarm","examplesRevised":"// In case when two branches have actually the same implementation\ny = x;\n\n// In case when it's like a copy-paste mistake\nif (x >= 0) {\n    y = x;\n} else {\n    // Do another thing\n}","cwe":["398"],"see":[]},{"key":"INSUFFICIENT_NULL_CHECK","name":"`null` or `undefined` check should be consistent for all accesses of a variable","description":"This rule applies when a variable is checked for `null` (or `undefined`) value at one point but is accessed without `null` check at another point.\n\nIf the variable has indeed `null` value, `TypeError` exception occurs when trying to access its property or call it as a function.\n\nTherefore, a programmer needs to check the following:\n\n * Access a variable consistently after checking it is not `null`\n * Remove all `null` checks of a variable consistently if it cannot be `null`","severity":["Medium"],"type":"Error","tag":[],"examples":"// Example 1\nfunction foo(x) {\n    x.p = 42;\n    if (x != null) { // INSUFFICIENT_NULL_CHECK alarm\n    }\n}\n\n// Example 2\nfunction foo(x) {\n    if (x != null) { // INSUFFICIENT_NULL_CHECK alarm\n    }\n    y = x.p;\n}\n\n// Example 3\nfunction foo(cb) {\n    cb();\n    if (cb != null) { // INSUFFICIENT_NULL_CHECK alarm\n    }\n}","examplesRevised":"// Example 1\nfunction foo(x) {\n    if (x != null) {\n        x.p = 42;\n    }\n}\n\n// Example 2\nfunction foo(x) {\n    if (x != null) {\n    }\n    y = x ? x.p : '';\n}\n\n// Example 3\nfunction foo(cb) {\n    if (cb != null) {\n        cb();\n    }\n}","cwe":[],"see":[]},{"key":"MISMATCHED_COUNT_OF_ARGS","name":"Built-in API should be called with the correct number of arguments","description":"This rule applies when built-in API is called with the wrong number of arguments.\n\nBecause built-in has the specification for its arguments, arguments are useless or cause undefined behavior if the number of arguments does not match.","severity":["Low","Medium"],"type":"Error","tag":[],"examples":"var y = Math.atan2(a/b); // MISMATCHED_COUNT_OF_ARGS alarm","examplesRevised":"var y = Math.atan2(a, b);","cwe":[],"see":[]},{"key":"MISSING_COMMA","name":"Comma (,) should not be missing between function arguments or array elements","description":"This rule applies when comma (,) seems to be missing between function arguments or array elements.\n\nFor example, in code `f(x. y)`, it is likely that comma was intended instead of dot (.).\n\nIf it is programmer's intention, removing the unnecessary space is recommended for readability and maintainability.","severity":["Medium"],"type":"Code Quality","tag":[],"examples":"reject('Create badge failed: '. err); // MISSING_COMMA alarm","examplesRevised":"reject('Create badge failed: ', err);","cwe":[],"see":[]},{"key":"MISSING_KEY_PROP","name":"`key` prop should be defined at each element inside the children of a React element","description":"This rule applies when `key` prop is missing at each element inside the children of a React element.\n\nIn React, rendering is optimized using React's diff algorithm when updating DOM tree.\nIf `key` prop is missing in each React element when recursing on children of a DOM node, render performance will not be optimized because the diff algorithm based on `key` prop cannot be used.\n\nAlso in this case, React will output a warning message.","severity":["Medium"],"type":"Code Quality","tag":["react"],"examples":"import React from 'react';\n\nclass Hello extends React.Component {\n    render() {\n        var childs = this.props.greetings.map((greeting) => <li value={greeting.name}>{greeting.name}</li>); // MISSING_KEY_PROP alarm\n\n        return (\n            <ul>\n                {childs}\n            </ul>\n        );\n    }\n}","examplesRevised":"import React from 'react';\n\nclass Hello extends React.Component {\n    render() {\n        var childs = this.props.greetings.map((greeting) => <li key={greeting.key} value={greeting.name}>{greeting.name}</li>);\n\n        return (\n            <ul>\n                {childs}\n            </ul>\n        );\n    }\n}","cwe":[],"see":["[Key prop](https://facebook.github.io/react/docs/reconciliation.html#recursing-on-children)"]},{"key":"MISSING_RETURN_VALUE","name":"Return value of function without any `return` statement should not be used","description":"This rule applies when return value is used even though the function has no `return` statement.\n\nIt might be intentional, but it often is a programmer's mistake forgetting `return` statement.\n\n**Note:** Not applied for the following idiomatic cases where the return value is not in actual use:\n\n 1. Empty function\n 2. Error function, which always throws exception\n 3. IIFE(Immediately-Invoked Function Expression) call\n 4. Return value is chained to another `return` or `throw` statement\n 5. Return value is used as an argument of `void` operator","severity":["Medium"],"type":"Error","tag":[],"examples":"function add(x, y) {\n    x + y;\n}\nvar sum = add(1, 2); // MISSING_RETURN_VALUE alarm because function 'add' does not return a value.","examplesRevised":"function add(x, y) {\n    return x + y;\n}\nvar sum = add(1, 2);","cwe":[],"see":[]},{"key":"MISSING_SUPER_CALL","name":"Constructor of inherited class should call `super`","description":"This rule applies when constructor of inherited class does not have `super` call.\n\nWhen instantiating the class of such a case, `ReferenceError` exception is thrown.\n\n**Note:** This case could not be a problem if a certain transpiler is used, but it can be good to fix the problem for using native class without the transpiler.","severity":["High"],"type":"Error","tag":[],"examples":"class A {}\nclass B extends A {\n    constructor() { // MISSING_SUPER_CALL alarm\n        var a = 1;\n    }\n}\n\nnew B();","examplesRevised":"class A {}\nclass B extends A {\n    constructor() {\n        super();\n        var a = 1;\n    }\n}","cwe":[],"see":[]},{"key":"MISSING_THROW","name":"`throw` should be used to actually throw an exception","description":"This rule applies when an exception instance is created but is not either referenced or thrown at all.\n\nIn such a case, it is highly probable that `throw` is unintentionally missing.","severity":["Medium"],"type":"Error","tag":[],"examples":"if (x === null) {\n    new Error(\"x should not be null\"); // MISSING_THROW alarm\n}","examplesRevised":"if (x === null) {\n    throw new Error(\"x should not be null\");\n}","cwe":[],"see":[]},{"key":"NO_EFFECT_CALL","name":"Result of built-in API call should not be ignored when it has no side effect","description":"This rule applies when the result of built-in API call, which has no side effects, is not used.\n\nFor example, calling `substring` API on the string has no side effect on itself. So it is useless if the result is not used.\n\nThis is likely to be a programmer's misunderstanding. Therefore, the result should not be ignored or the code should be removed.","severity":["Medium"],"type":"Error","tag":["cwe"],"examples":"var s = 'foobar';\ns.substring(0, 3); // NO_EFFECT_CALL alarm because the return value of 'substring' is not used.","examplesRevised":"var s = 'foobar';\nvar ret = s.substring(0, 3);","cwe":["398"],"see":[]},{"key":"NON_REFERENCE_LHS","name":"Value should not be assigned to LHS which is not a reference","description":"This rule applies when value is assigned to the left-hand side (or LHS) which is not a reference.\n\nIn this case, a `ReferenceError` exception is thrown.","severity":["High"],"type":"Error","tag":[],"examples":"function f() {\n    return 42;\n}\nif (f() = 42) { // NON_REFERENCE_LHS alarm\n    good = true;\n}","examplesRevised":"function f() {\n    return 42;\n}\nif (f() === 42) {\n    good = true;\n}","cwe":[],"see":[]},{"key":"NULL_POINTER","name":"Properties of variables with `null` or `undefined` values should not be accessed","description":"This rule applies when properties of variables with `null` or `undefined` values are accessed.\n\nTrying to access properties of `null` or `undefined` variables causes a `TypeError` exception.","severity":["High"],"type":"Error","tag":["cwe"],"examples":"// Example 1\nfunction foo() {\n    var obj;\n    var y = obj.x; // NULL_POINTER alarm\n}\n\n// Example 2\nif (x == null) { // (x == null) should be modified to (x != null).\n    y = x.a; // NULL_POINTER alarm: x is undefined or null but is property-accessed.\n}\n\n// Example 3\ny = x || x.a; // NULL_POINTER alarm: x has a falsy value but is property-accessed.","examplesRevised":"// Example 1\nfunction foo() {\n    var obj = { x: 1 }; // 'obj' should be initialized.\n    var y = obj.x;\n}\n\n// Example 2\nif (x != null) {\n    y = x.a;\n}\n\n// Example 3\ny = x && x.a;","cwe":["476"],"see":[]},{"key":"NUMBER_ARG_OUT_OF_RANGE","name":"Radix or precision arguments of Number-related functions should not exceed the limit","description":"This rule applies when radix or precision arguments of Number-related functions, e.g. `toString`, are not in the permitted range.\n\nIt can be applied to the following functions:\n\n 1. `Number.prototype.toString`: 2~36\n 2. `Number.prototype.toFixed`: 0~20\n 3. `Number.prototype.toExponential`: 0~20\n 4. `Number.prototype.toPrecision`: 1~21","severity":["High"],"type":"Error","tag":[],"examples":"var x = 42;\nvar s_radix_64 = x.toString(64); // NUMBER_ARG_OUT_OF_RANGE alarm","examplesRevised":"var x = 42;\nvar s_radix_16 = x.toString(16);","cwe":[],"see":["[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)"]},{"key":"REACT_API_TYPO","name":"React's APIs should not have typo","description":"This rule applies when React's APIs have typo.\n\nReact's APIs usually have long and complicated names which typos can be easily made, and in this case the following unlikely intents could occur:\n\n  1. Calling a React method having typo can throw `ReferenceError`\n  2. Overriding React component's lifecycle method having typo can make its intent miss at the particular time\n  3. If React component's `propTypes` property has typo, type checking of the component's props can be missed","severity":["Medium"],"type":"Error","tag":["react"],"examples":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Hello extends React.Component {\n    componentWillmount() { // REACT_API_TYPO alarm because `componentWillMount` is a correct name of the lifecycle method.\n        this.state = {\n            greetName: this.props.greetName\n        };\n    }\n    render() {\n        return (<div>{this.state.greetName}</div>);\n    }\n}\n\nHello.PropTypes = { // REACT_API_TYPO alarm because `propTypes` is a correct name of the component's class.\n    greetName: PropTypes.string\n};","examplesRevised":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Hello extends React.Component {\n    componentWillMount() {\n        this.state = {\n            greetName: this.props.greetName\n        };\n    }\n    render() {\n        return (<div>{this.state.greetName}</div>);\n    }\n}\n\nHello.propTypes = {\n    greetName: PropTypes.string\n};","cwe":[],"see":["[React Top-Level API](https://facebook.github.io/react/docs/react-api.html)"]},{"key":"REFERENCE_BEFORE_LEXICAL_DECL","name":"Lexical variables (`let`, `const` and `class`) must be declared before they are used","description":"This rule applies when lexical variables to be declared with `let`, `const` or `class` are referenced before their declarations.\n\nReferencing the variables before their declarations throws a `ReferenceError` exception.\n\nTherefore, the lexical variables with `let`, `const` or `class` should be declared before they are referenced.","severity":["High"],"type":"Error","tag":["es6"],"examples":"function foo() {\n    console.log(v1); // REFERENCE_BEFORE_LEXICAL_DECL alarm\n    let v1 = 2;\n\n    v2 = 1; // REFERENCE_BEFORE_LEXICAL_DECL alarm\n    const v2 = 3;\n\n    new A(); // REFERENCE_BEFORE_LEXICAL_DECL alarm\n    class A {};\n}","examplesRevised":"function foo() {\n    let v1 = 2;\n    console.log(v1);\n\n    const v2 = 3;\n\n    class A {};\n    new A();\n}","cwe":[],"see":[]},{"key":"SAME_OPERAND_VALUE","name":"Operands always having the same value should be avoided","description":"This rule applies when the operation's result is fixed because operands have the same value always.\n\nFor example, the result of `x - x` is 0 for all values of `x` except `NaN`.\n\nIt is recommended to use the constant value because it is often indistinguishable from mistake.\n\nThe following operators are considered: `-`, `/`, `%`, `^`, `<`, `>`, `=`, `>=`, `==`, `!=`, `===`, `!==`","severity":["Medium"],"type":"Code Quality","tag":[],"examples":"// Example 1\nif (x) {\n    diff = x - y;\n} else {\n    x = y;\n    diff = x - y; // SAME_OPERAND_VALUE alarm. The result is always 0.\n}\n\n// Example 2\nif (value > maxValue) {\n    value = maxValue;\n    diff = value - maxValue; // SAME_OPERAND_VALUE alarm. The result is always 0.\n}","examplesRevised":"// Example 1\nif (x) {\n    diff = x - y;\n} else {\n    x = y;\n    diff = 0;\n}\n\n// Example 2\nif (value > maxValue) {\n  diff = value - maxValue;\n  value = maxValue;\n}","cwe":[],"see":[]},{"key":"STRAY_SEMICOLON","name":"An extraneous semicolon should be avoided to prevent an unintentional logic change","description":"This rule applies when an extraneous semicolon causes an unintentional logic change.\n\nLogic may be changed unintentionally due to an extraneous semicolon inserted in front of `then` or `else` part of a conditional statement or body part of a loop statement.","severity":["Medium"],"type":"Error","tag":["cwe"],"examples":"switch (x) {\ncase 0:\n    if (y == 0); break; // STRAY_SEMICOLON alarm\ncase 1:\n    ...\n}\nwhile (++x <= 10) ; // STRAY_SEMICOLON alarm\n{\n    sum += x;\n}","examplesRevised":"switch (x) {\ncase 0:\n    if (y == 0) break;\ncase 1:\n    ...\n}\nwhile (++x <= 10)\n{\n    sum += x;\n}","cwe":["670"],"see":[]},{"key":"STRICT_MODE_ARGS_CALLER_CALLEE","name":"`caller` and `callee` properties should not be accessed on `arguments` object for strict mode function","description":"This rule applies when `caller` and `callee` properties are accessed on `arguments` object allocated for calling strict mode function.\n\nBecause `arguments.caller` and `arguments.callee` make several code optimizations impossible, they were deprecated and the use of both throws `TypeError` exception for strict mode function.\n\nIt also applies to the function's `caller` and `arguments` properties. (See 'STRICT_MODE_FUNC_PROPERTY' rule)","severity":["High"],"type":"Error","tag":[],"examples":"setTimeout(function () {\n    'use strict';\n    setTimeout(arguments.callee, 100); // STRICT_MODE_ARGS_CALLER_CALLEE alarm\n}, 100);","examplesRevised":"function callback() {\n    'use strict';\n    setTimeout(callback, 100);\n}\nsetTimeout(callback, 100);","cwe":[],"see":["[Strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)"]},{"key":"STRICT_MODE_ASSIGN_TO_READONLY_VAR","name":"In strict mode, read-only variables cannot be assigned","description":"This rule applies when a value is assigned to read-only variables in strict mode.\n\nThe read-only variables are as follows:\n 1. `import` bindings\n 2. Predefined global variables such as `undefined`, `NaN`, `Infinity`\n\nAny assignment to the above variables that silently fails in normal code will throw `TypeError` exception in strict mode.\n\n**Note:** Applied for module code without `\"use strict\"` directive since module code is always strict mode code.","severity":["High"],"type":"Error","tag":[],"examples":"// Example 1\nimport {A} from 'a';\nA = 1; // STRICT_MODE_ASSIGN_TO_READONLY_VAR alarm because it is module code\n\n// Example 2\n'use strict';\nundefined = 1; // STRICT_MODE_ASSIGN_TO_READONLY_VAR alarm\nNaN = 2; // STRICT_MODE_ASSIGN_TO_READONLY_VAR alarm\nInfinity = 3; // STRICT_MODE_ASSIGN_TO_READONLY_VAR alarm","cwe":[],"see":["[Strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)"]},{"key":"STRICT_MODE_FUNC_PROPERTY","name":"`caller` and `arguments` properties should not be accessed on strict mode function","description":"This rule applies when strict mode function's `caller` and `arguments` properties are used.\n\n`caller` and `arguments` properties for accessing the call stack implies security problems that unsafe code can gain access to privileged functions. Therefore, accessing `caller` and `arguments` properties is prohibited for strict mode function objects.","severity":["High"],"type":"Error","tag":[],"examples":"function f() {\n    'use strict';\n}\nf.caller; // STRICT_MODE_FUNC_PROPERTY alarm\nf.arguments; // STRICT_MODE_FUNC_PROPERTY alarm\nf.arguments = 1; // STRICT_MODE_FUNC_PROPERTY alarm","examplesRevised":"function f() {\n}\nf.caller;\nf.arguments;\nf.arguments = 1;","cwe":[],"see":["[Strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)"]},{"key":"STRICT_MODE_INVALID_THIS","name":"Strict mode function should not be called with invalid `this` access","description":"This rule applies when strict mode function is called with invalid `this` access.\n\nIn non-strict mode function,\n 1. `this` is evaluated as global object when the function is bound with `null` or `undefined` value e.g. f();\n 2. `this` is evaluated as wrapper object when the function is bound with primitive value e.g. f.apply(1);\n\nBut in the strict mode function, `this` is evaluated as the same value as bound. Therefore, when accessing `this` on strict mode function with the above two cases, a `TypeError` exception is thrown.","severity":["High"],"type":"Error","tag":[],"examples":"function f() { // STRICT_MODE_INVALID_THIS alarm\n    'use strict';\n    this.a = 1; // TypeError because this is undefined\n}\nf();\n\nfunction b() { // STRICT_MODE_INVALID_THIS alarm\n    'use strict';\n    this.a = 1; // TypeError because this is null\n}\nb.call(null);","examplesRevised":"function f() {\n    'use strict';\n    this.a = 1;\n}\nvar obj = { f: f };\nobj.f();\n\nfunction b() {\n    'use strict';\n    this.a = 1;\n}\nvar bb = new b();\nb.call(bb);","cwe":[],"see":["[Strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)"]},{"key":"SWITCH_CASE_FALL_THROUGH","name":"Switch cases should not fall through to the next case","description":"This rule applies when the execution of a switch case continues to the following case.\n\nIt might be intentional, but it often is a programmer's mistake forgetting `break` statement.","severity":["Low"],"type":"Code Quality","tag":["cwe"],"examples":"switch (foo) {\ncase 1: // SWITCH_CASE_FALL_THROUGH alarm\n    doSomething(1);\ncase 2:\n    doSomething(2);\n}","examplesRevised":"switch (foo) {\ncase 1:\n    doSomething(1);\n    break;\ncase 2:\n    doSomething(2);\n}","cwe":["484"],"see":["MISRA C:2004, Rule 15.2: An unconditional break statement shall terminate every non-empty switch clause","MISRA C:2012, Rule 16.3: An unconditional break statement shall terminate every switch-clause"]},{"key":"SWITCH_CASE_INCOMPATIBLE_TYPE","name":"`switch` and its cases should be compared with equal types","description":"This rule applies when `switch` and its cases are compared with different types. That is, `switch` statement has numeric string value and `case` statements have number value.\n\nBecause `switch` and its cases are compared with strict equality, cases with different types do not match. A programmer might incorrectly think numeric string and number match by implicit type conversion, but it's not the case.","severity":["Medium"],"type":"Error","tag":[],"examples":"var s = '42';\n// SWITCH_CASE_INCOMPATIBLE_TYPE alarm\nswitch (s) {\ncase 0:\ncase 42:\n    matched = true;\n    break;\n}","examplesRevised":"var s = 42;\nswitch (s) {\ncase 0:\ncase 42:\n    matched = true;\n    break;\n}","cwe":[],"see":["[switch statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch)"]},{"key":"SYNTAX_ERROR","name":"JavaScript syntax error","description":"This rule applies when JavaScript file has syntax errors.","severity":["High"],"type":"Error","tag":[],"examples":"// Example 1\nvarr x; // SYNTAX_ERROR alarm\n\n// Example 2\nvar regexp = /?/g; // SYNTAX_ERROR alarm","examplesRevised":"// Example 1\nvar x;\n\n// Example 2\nvar regexp = /a?/g;","cwe":[],"see":[]},{"key":"TOO_MANY_ARGS","name":"Functions should not be called with extra arguments","description":"This rule applies when a function is called with extra arguments.\n\nFor code readability and maintainability, this is not recommended because the extra arguments are always ignored in the function execution.\n\nIt is recommended to remove the unnecessary arguments or refactor the function itself to process the extra arguments.\n\n**Note:** Not applied for empty functions and the case wherein `arguments` is used.","severity":["Low"],"type":"Code Quality","tag":["cwe"],"examples":"function add(x, y) {\n    return x + y;\n}\nvar sum = add(1, 2, 3); // TOO_MANY_ARGS alarm because 'add' function takes only 2 arguments.","examplesRevised":"function add3(x, y, z) {\n    return x + y + z;\n}\nvar sum = add3(1, 2, 3);","cwe":["628"],"see":["MISRA C:2004, Rule 16.6: The number of arguments passed to a function shall match the number of parameters.","MISRA C:2012, Rule 8.2: Number of formal and actual parameters passed to function do not match"]},{"key":"UNEXPECTED_GLOBAL_DECL","name":"Unexpected global variable declaration should be avoided","description":"This rule applies when global variable is unexpectedly declared.\n\nAssigning a value to undeclared variable creates a new variable inside the global scope. Unexpectedly created global variable as above can cause memory leaks.\n\nFor example, unexpected global variable can be created as the following cases:\n 1. Initialize an undeclared loop variable\n 2. In the middle of variable declaration list, comma is missing or semicolon is inserted by mistake at the end of variable declaration","severity":["Medium"],"type":"Code Quality","tag":[],"examples":"// Example 1\nvar b = [1, 2, 3];\nfor (a = 0 /* UNEXPECTED_GLOBAL_DECL alarm */; a < b.length; a++) {}\n\n// Example 2\nvar c = 1,\n    d = 2\n    e = 3, // UNEXPECTED_GLOBAL_DECL alarm\n    f = 4; // UNEXPECTED_GLOBAL_DECL alarm","examplesRevised":"// Example 1\nvar b = [1, 2, 3];\nfor (var a = 0; a < b.length; a++) {}\n\n// Example 2\nvar c = 1,\n    d = 2,\n    e = 3,\n    f = 4;","cwe":[],"see":[]},{"key":"UNINITIALIZED_LOCAL_VAR","name":"Uninitialized local variables should not be accessed","description":"This rule applies when uninitialized local variables are accessed.\n\nAccessing an uninitialized local variable results in `undefined` value so that it is not likely to be a programmer's intent.","severity":["Medium"],"type":"Error","tag":[],"examples":"function foo() {\n    var x;\n    clearTimeout(x); // UNINITIALIZED_LOCAL_VAR alarm\n}","examplesRevised":"function foo() {\n    var x = 1000;\n    clearTimeout(x);\n}","cwe":[],"see":[]},{"key":"UNREACHABLE_CODE","name":"Unreachable code should not be used","description":"This rule applies when code is unreachable.\n\nStatements after `return`, `throw`, `break` and `continue` are not executed so that it might not be a programmer's intent.","severity":["Medium"],"type":"Error","tag":["cwe"],"examples":"function foo() {\n    return;\n\n    // UNREACHABLE_CODE alarm\n    var bar = 1;\n}","examplesRevised":"// In case when 'return' statement is a mistake\nfunction foo() {\n    var bar = 1;\n}\n\n// In case when you do not need statements after 'return' statement\nfunction foo() {\n    return;\n}","cwe":["561"],"see":[]},{"key":"UNUSED_DECL","name":"Unused local variables and functions should be removed","description":"This rule applies when local variables and functions are declared but not used.\n\nFor maintainability, it is recommended to remove unused code. Also, it might be a mistake that a programmer forgets to use declared variables and functions.","severity":["Low"],"type":"Code Quality","tag":[],"examples":"function foo() {\n    function unusedFunction() { // UNUSED_DECL alarm because local variable 'unusedFunction' is not used.\n    }\n    var bar = 1;\n    var unused_var; // UNUSED_DECL alarm because local variable 'unused_var' is not used.\n    doSomething(bar);\n}\n\nfunction doSomethinng(bar) {\n}","examplesRevised":"function foo() {\n    var bar = 1;\n    doSomething(bar);\n}\n\nfunction doSomethinng(bar) {\n}","cwe":[],"see":[]},{"key":"UNUSED_EXPR","name":"Result of expressions should be used","description":"This rule applies when the result of expression is not used.\n\nUnused expression is dead so that it might imply a mistake or unnecessary code.\n\n**Note:** Not applied for the code in `try` statement because unused expression is often used to check an exception, e.g. `try { opener.document; } catch (e) {}`.","severity":["Low","Medium"],"type":"Code Quality","tag":["cwe"],"examples":"// Example 1\nfunction f(x) {\n    x + 1; // UNUSED_EXPR alarm\n}\n\n// Example 2\nfunction g(x, y) {\n    x.p == y.p; // UNUSED_EXPR alarm\n}","examplesRevised":"// Example 1\nfunction f(x) {\n    return x + 1;\n}\n\n// Example 2\nfunction g(x, y) {\n    x.p = y.p;\n}","cwe":["398","482","665"],"see":["MISRA C:2004, Rule 14.2: All non-null statements shall either have at lest one side effect however executed, or cause control flow to change"]},{"key":"UNUSED_IMPORT","name":"Unused imported bindings should be removed","description":"This rule applies when imported bindings are declared but not used.\n\nFor maintainability, it is recommended to remove unused code. Also, it might be a mistake that a programmer forgets to use declared imported bindings.","severity":["Low"],"type":"Code Quality","tag":["es6"],"examples":"import {\n    count,\n    increment // UNUSED_IMPORT alarm\n} from \"my-counter\";\nconsole.log(count);","examplesRevised":"// In case when the imported binding is actually not used\nimport {\n    count\n} from \"my-counter\";\nconsole.log(count);","cwe":[],"see":[]},{"key":"UNUSED_REQUIRE","name":"Unused `require()` should be removed","description":"This rule applies when a variable holding a `require()` result is not used.\n\nFor maintainability, it is recommended to remove unused module dependencies. If just module loading was intended, it is more explicit to require the module without variable assignment.","severity":["Low"],"type":"Code Quality","tag":["nodejs"],"examples":"let init = require(\"initialize\"); // UNUSED_REQUIRE alarm\nlet foo = require(\"foo\"); // UNUSED_REQUIRE alarm\nmodule.exports = function () { }","examplesRevised":"require(\"initialize\");\nmodule.exports = function () { }","cwe":[],"see":[]},{"key":"UNUSED_VAR_ASSIGN","name":"Dead variables should not be used","description":"This rule applies when a variable is assigned a value that is not used by subsequent code or is overwritten by another assignment without use.\n\nThe value is dead so that it might imply a mistake or unnecessary code.\n\n**Note:** Not applied for the assignment with initialization values like \"\", '', 0, true, !0, false, !1, null, undefined, void ..., {}, [].","severity":["Low"],"type":"Code Quality","tag":["cwe"],"examples":"function foo(url) {\n    var target = url + \"user\" + user; // UNUSED_VAR_ASSIGN alarm\n    target = url.replace(/\\.|\\?|\\&|\\/|\\=|\\:|\\-|\\s/gi, \"\");\n}","examplesRevised":"function foo(url) {\n    var target = url + \"user\" + user;\n    target = target.replace(/\\.|\\?|\\&|\\/|\\=|\\:|\\-|\\s/gi, \"\");\n}","cwe":["563"],"see":[]},{"key":"USELESS_PROP_TYPES","name":"Useless `PropTypes` declaration should be removed","description":"This rule applies when a `PropTypes` declaration exists for a property but the property is not used for the implementation of the component.\n\nFor maintainability, it is recommended to remove useless `PropTypes` declarations.","severity":["Low"],"type":"Code Quality","tag":["react"],"examples":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Hello extends React.Component {\n    render() {\n        return <div>Hello, {this.props.name}</div>;\n    }\n}\n\nHello.propTypes = {\n    name: PropTypes.string,\n    age: PropTypes.number // USELESS_PROP_TYPES alarm because this property 'age' is not used.\n};","examplesRevised":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Hello extends React.Component {\n    render() {\n        return <div>Hello, {this.props.name}</div>;\n    }\n}\n\nHello.propTypes = {\n    name: PropTypes.string\n};","cwe":[],"see":["[PropTypes](https://facebook.github.io/react/docs/typechecking-with-proptypes.html)"]}]}
